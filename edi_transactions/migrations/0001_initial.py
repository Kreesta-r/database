# Generated by Django 4.2.23 on 2025-08-26 23:10

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('registration_number', models.CharField(blank=True, max_length=100, null=True)),
                ('tax_id', models.CharField(blank=True, max_length=100, null=True)),
                ('address', models.JSONField(blank=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=50, null=True)),
                ('email', models.EmailField(max_length=254)),
                ('website', models.URLField(blank=True, null=True)),
                ('industry', models.CharField(blank=True, max_length=100, null=True)),
                ('company_size', models.CharField(blank=True, choices=[('SMALL', 'Small (1-50 employees)'), ('MEDIUM', 'Medium (51-250 employees)'), ('LARGE', 'Large (251-1000 employees)'), ('ENTERPRISE', 'Enterprise (1000+ employees)')], max_length=20, null=True)),
                ('subscription_status', models.CharField(choices=[('ACTIVE', 'Active'), ('SUSPENDED', 'Suspended'), ('CANCELLED', 'Cancelled'), ('TRIAL', 'Trial')], default='ACTIVE', max_length=20)),
                ('subscription_start_date', models.DateField(blank=True, null=True)),
                ('subscription_end_date', models.DateField(blank=True, null=True)),
                ('scbn_mailbox_id', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('scbn_credentials', models.JSONField(blank=True, null=True)),
                ('compliance_standards', models.JSONField(default=list)),
                ('company_timezone', models.CharField(default='Africa/Lagos', max_length=50)),
                ('currency', models.CharField(default='NGN', max_length=3)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'companies',
                'db_table': 'companies',
            },
        ),
        migrations.CreateModel(
            name='CompanyUser',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('ADMIN', 'Administrator'), ('MANAGER', 'Manager'), ('USER', 'User'), ('VIEWER', 'Viewer')], max_length=20)),
                ('permissions', models.JSONField(blank=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=50, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.company')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'company_users',
            },
        ),
        migrations.CreateModel(
            name='DocumentType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('format_standard', models.CharField(choices=[('X12', 'ANSI X12'), ('EDIFACT', 'UN/EDIFACT'), ('XML', 'XML'), ('JSON', 'JSON')], default='X12', max_length=20)),
                ('direction', models.CharField(choices=[('INBOUND', 'Inbound'), ('OUTBOUND', 'Outbound'), ('BOTH', 'Both')], default='BOTH', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'edi_document_types',
            },
        ),
        migrations.CreateModel(
            name='EDITransaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('transaction_control_number', models.CharField(blank=True, max_length=50, null=True)),
                ('interchange_control_number', models.CharField(blank=True, max_length=50, null=True)),
                ('group_control_number', models.CharField(blank=True, max_length=50, null=True)),
                ('po_number', models.CharField(blank=True, max_length=100, null=True)),
                ('invoice_number', models.CharField(blank=True, max_length=100, null=True)),
                ('direction', models.CharField(choices=[('INBOUND', 'Inbound'), ('OUTBOUND', 'Outbound')], max_length=20)),
                ('status', models.CharField(choices=[('RECEIVED', 'Received'), ('PROCESSING', 'Processing'), ('PARSED', 'Parsed'), ('ERROR', 'Error'), ('COMPLETED', 'Completed'), ('ACKNOWLEDGED', 'Acknowledged')], default='RECEIVED', max_length=20)),
                ('priority', models.CharField(choices=[('LOW', 'Low'), ('NORMAL', 'Normal'), ('HIGH', 'High'), ('URGENT', 'Urgent')], default='NORMAL', max_length=20)),
                ('original_filename', models.CharField(blank=True, max_length=255, null=True)),
                ('file_size_bytes', models.IntegerField(blank=True, null=True)),
                ('file_format', models.CharField(blank=True, max_length=20, null=True)),
                ('raw_content', models.TextField(blank=True, null=True)),
                ('parsed_content', models.JSONField(blank=True, null=True)),
                ('openai_summary', models.TextField(blank=True, null=True)),
                ('openai_insights', models.JSONField(blank=True, null=True)),
                ('validation_status', models.CharField(choices=[('PENDING', 'Pending'), ('VALID', 'Valid'), ('INVALID', 'Invalid'), ('WARNING', 'Warning')], default='PENDING', max_length=20)),
                ('validation_errors', models.JSONField(blank=True, null=True)),
                ('total_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('currency', models.CharField(default='NGN', max_length=3)),
                ('line_item_count', models.IntegerField(blank=True, null=True)),
                ('received_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('tags', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.company')),
                ('document_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='edi_transactions.documenttype')),
            ],
            options={
                'db_table': 'edi_transactions',
            },
        ),
        migrations.CreateModel(
            name='FunctionalGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('group_control_number', models.CharField(max_length=20)),
                ('functional_id_code', models.CharField(max_length=10)),
                ('application_senders_code', models.CharField(max_length=20)),
                ('application_receivers_code', models.CharField(max_length=20)),
                ('group_date', models.DateField()),
                ('group_time', models.TimeField()),
                ('transaction_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'edi_functional_groups',
            },
        ),
        migrations.CreateModel(
            name='Interchange',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('control_number', models.CharField(max_length=20, unique=True)),
                ('interchange_date', models.DateField()),
                ('interchange_time', models.TimeField()),
                ('direction', models.CharField(choices=[('INBOUND', 'Inbound'), ('OUTBOUND', 'Outbound')], max_length=20)),
                ('status', models.CharField(choices=[('RECEIVED', 'Received'), ('PROCESSING', 'Processing'), ('PROCESSED', 'Processed'), ('ERROR', 'Error'), ('ACKNOWLEDGED', 'Acknowledged')], default='RECEIVED', max_length=20)),
                ('total_transactions', models.IntegerField(default=0)),
                ('original_filename', models.CharField(blank=True, max_length=255, null=True)),
                ('file_size_bytes', models.IntegerField(blank=True, null=True)),
                ('raw_content', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.company')),
            ],
            options={
                'db_table': 'edi_interchanges',
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('invoice_number', models.CharField(max_length=50)),
                ('invoice_date', models.DateField()),
                ('subtotal_amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('shipping_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('currency_code', models.CharField(default='USD', max_length=3)),
                ('payment_terms', models.CharField(blank=True, max_length=50, null=True)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SENT', 'Sent'), ('RECEIVED', 'Received'), ('PAID', 'Paid'), ('DISPUTED', 'Disputed'), ('CANCELLED', 'Cancelled'), ('ERROR', 'Error')], default='DRAFT', max_length=20)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'edi_invoices',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('payment_number', models.CharField(max_length=50)),
                ('payment_date', models.DateField()),
                ('payment_amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('payment_method', models.CharField(choices=[('ACH', 'ACH'), ('CHECK', 'Check'), ('WIRE', 'Wire'), ('CARD', 'Credit/Debit Card')], default='ACH', max_length=10)),
                ('currency_code', models.CharField(default='USD', max_length=3)),
                ('bank_account_number', models.CharField(blank=True, max_length=50, null=True)),
                ('routing_number', models.CharField(blank=True, max_length=20, null=True)),
                ('check_number', models.CharField(blank=True, max_length=20, null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSED', 'Processed'), ('CLEARED', 'Cleared'), ('FAILED', 'Failed'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=20)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.company')),
                ('edi_transaction', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.editransaction')),
                ('functional_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.functionalgroup')),
            ],
            options={
                'db_table': 'edi_payments',
            },
        ),
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('display_name', models.CharField(max_length=100)),
                ('price_ngn', models.DecimalField(decimal_places=2, max_digits=10)),
                ('max_users', models.IntegerField()),
                ('max_transactions_monthly', models.IntegerField()),
                ('features', models.JSONField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'subscription_plans',
            },
        ),
        migrations.CreateModel(
            name='TradingPartner',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('partner_code', models.CharField(max_length=50)),
                ('edi_id', models.CharField(max_length=50)),
                ('edi_qualifier', models.CharField(max_length=10)),
                ('contact_name', models.CharField(blank=True, max_length=100, null=True)),
                ('contact_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('contact_phone', models.CharField(blank=True, max_length=50, null=True)),
                ('address', models.JSONField(blank=True, null=True)),
                ('edi_formats_supported', models.JSONField(default=list)),
                ('document_types_supported', models.JSONField(default=list)),
                ('communication_protocol', models.CharField(choices=[('VAN', 'VAN (Value Added Network)'), ('AS2', 'AS2'), ('HTTPS', 'HTTPS'), ('SFTP', 'SFTP'), ('SCBN', 'Sterling Commerce Business Network')], default='SCBN', max_length=50)),
                ('partnership_status', models.CharField(choices=[('PENDING', 'Pending'), ('ACTIVE', 'Active'), ('SUSPENDED', 'Suspended'), ('INACTIVE', 'Inactive')], default='PENDING', max_length=20)),
                ('onboarding_completed', models.BooleanField(default=False)),
                ('sla_response_time_hours', models.IntegerField(blank=True, null=True)),
                ('performance_metrics', models.JSONField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.company')),
            ],
            options={
                'db_table': 'trading_partners',
            },
        ),
        migrations.CreateModel(
            name='SystemConfig',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('config_key', models.CharField(max_length=100, unique=True)),
                ('config_value', models.JSONField()),
                ('description', models.TextField(blank=True, null=True)),
                ('is_editable', models.BooleanField(default=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='edi_transactions.companyuser')),
            ],
            options={
                'db_table': 'system_config',
            },
        ),
        migrations.CreateModel(
            name='SLAMonitoring',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('metric_name', models.CharField(max_length=100)),
                ('target_value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('actual_value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('measurement_period', models.CharField(choices=[('HOURLY', 'Hourly'), ('DAILY', 'Daily'), ('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly')], max_length=20)),
                ('alert_threshold', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('alert_sent', models.BooleanField(default=False)),
                ('alert_sent_at', models.DateTimeField(blank=True, null=True)),
                ('measured_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.company')),
                ('trading_partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.tradingpartner')),
            ],
            options={
                'db_table': 'sla_monitoring',
            },
        ),
        migrations.CreateModel(
            name='SCBNIntegrationLog',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('operation_type', models.CharField(choices=[('POLL', 'Poll'), ('SEND', 'Send'), ('RECEIVE', 'Receive'), ('AUTHENTICATE', 'Authenticate')], max_length=50)),
                ('operation_status', models.CharField(choices=[('SUCCESS', 'Success'), ('FAILURE', 'Failure'), ('WARNING', 'Warning')], max_length=50)),
                ('request_data', models.JSONField(blank=True, null=True)),
                ('response_data', models.JSONField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('response_time_ms', models.IntegerField(blank=True, null=True)),
                ('files_processed', models.IntegerField(default=0)),
                ('files_failed', models.IntegerField(default=0)),
                ('started_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.company')),
            ],
            options={
                'db_table': 'scbn_integration_log',
            },
        ),
        migrations.CreateModel(
            name='PurchaseOrder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('po_number', models.CharField(max_length=50)),
                ('po_date', models.DateField()),
                ('po_type', models.CharField(choices=[('SA', 'Stand-alone Order'), ('KN', 'Purchase Order Change Request'), ('NE', 'New Order')], default='SA', max_length=10)),
                ('ship_to_name', models.CharField(blank=True, max_length=200, null=True)),
                ('ship_to_address', models.JSONField(blank=True, null=True)),
                ('requested_ship_date', models.DateField(blank=True, null=True)),
                ('requested_delivery_date', models.DateField(blank=True, null=True)),
                ('currency_code', models.CharField(default='USD', max_length=3)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('payment_terms', models.CharField(blank=True, max_length=50, null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('ACKNOWLEDGED', 'Acknowledged'), ('SHIPPED', 'Shipped'), ('DELIVERED', 'Delivered'), ('CANCELLED', 'Cancelled'), ('ERROR', 'Error')], default='PENDING', max_length=20)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('buyer_partner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='purchase_orders_as_buyer', to='edi_transactions.tradingpartner')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.company')),
                ('edi_transaction', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.editransaction')),
                ('functional_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.functionalgroup')),
                ('seller_partner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='purchase_orders_as_seller', to='edi_transactions.tradingpartner')),
            ],
            options={
                'db_table': 'edi_purchase_orders',
            },
        ),
        migrations.CreateModel(
            name='ProcessingLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('process_step', models.CharField(max_length=50)),
                ('process_status', models.CharField(choices=[('STARTED', 'Started'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('SKIPPED', 'Skipped')], max_length=20)),
                ('process_message', models.TextField(blank=True, null=True)),
                ('processing_duration', models.DurationField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.company')),
                ('edi_transaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.editransaction')),
                ('interchange', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.interchange')),
            ],
            options={
                'db_table': 'edi_processing_log',
            },
        ),
        migrations.CreateModel(
            name='ProcessingError',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('transaction_type', models.CharField(blank=True, max_length=10, null=True)),
                ('error_code', models.CharField(blank=True, max_length=20, null=True)),
                ('error_description', models.TextField()),
                ('error_location', models.CharField(blank=True, max_length=100, null=True)),
                ('severity', models.CharField(choices=[('ERROR', 'Error'), ('WARNING', 'Warning'), ('FATAL', 'Fatal'), ('INFO', 'Info')], max_length=10)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.company')),
                ('edi_transaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.editransaction')),
                ('interchange', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.interchange')),
            ],
            options={
                'db_table': 'edi_processing_errors',
            },
        ),
        migrations.CreateModel(
            name='PaymentDetail',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('invoice_number', models.CharField(blank=True, max_length=50, null=True)),
                ('payment_amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('adjustment_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('invoice', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='edi_transactions.invoice')),
                ('payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_details', to='edi_transactions.payment')),
            ],
            options={
                'db_table': 'edi_payment_details',
            },
        ),
        migrations.AddField(
            model_name='payment',
            name='payee_partner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='payments_as_payee', to='edi_transactions.tradingpartner'),
        ),
        migrations.AddField(
            model_name='payment',
            name='payer_partner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='payments_as_payer', to='edi_transactions.tradingpartner'),
        ),
        migrations.CreateModel(
            name='MonthlyTransactionSummary',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('year', models.IntegerField()),
                ('month', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('transaction_count', models.IntegerField(default=0)),
                ('total_amount', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('avg_processing_time_seconds', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('success_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('error_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.company')),
                ('document_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.documenttype')),
                ('trading_partner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.tradingpartner')),
            ],
            options={
                'db_table': 'monthly_transaction_summary',
            },
        ),
        migrations.AddField(
            model_name='invoice',
            name='buyer_partner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='invoices_as_buyer', to='edi_transactions.tradingpartner'),
        ),
        migrations.AddField(
            model_name='invoice',
            name='company',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.company'),
        ),
        migrations.AddField(
            model_name='invoice',
            name='edi_transaction',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.editransaction'),
        ),
        migrations.AddField(
            model_name='invoice',
            name='functional_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.functionalgroup'),
        ),
        migrations.AddField(
            model_name='invoice',
            name='purchase_order',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='edi_transactions.purchaseorder'),
        ),
        migrations.AddField(
            model_name='invoice',
            name='seller_partner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='invoices_as_seller', to='edi_transactions.tradingpartner'),
        ),
        migrations.AddField(
            model_name='interchange',
            name='receiver_partner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='received_interchanges', to='edi_transactions.tradingpartner'),
        ),
        migrations.AddField(
            model_name='interchange',
            name='sender_partner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sent_interchanges', to='edi_transactions.tradingpartner'),
        ),
        migrations.AddField(
            model_name='functionalgroup',
            name='interchange',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='functional_groups', to='edi_transactions.interchange'),
        ),
        migrations.AddField(
            model_name='editransaction',
            name='functional_group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.functionalgroup'),
        ),
        migrations.AddField(
            model_name='editransaction',
            name='trading_partner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='edi_transactions.tradingpartner'),
        ),
        migrations.CreateModel(
            name='EDILineItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('line_number', models.CharField(max_length=20)),
                ('product_code', models.CharField(blank=True, max_length=100, null=True)),
                ('product_description', models.TextField(blank=True, null=True)),
                ('upc_code', models.CharField(blank=True, max_length=50, null=True)),
                ('manufacturer_part_number', models.CharField(blank=True, max_length=100, null=True)),
                ('buyer_part_number', models.CharField(blank=True, max_length=100, null=True)),
                ('seller_part_number', models.CharField(blank=True, max_length=100, null=True)),
                ('quantity', models.DecimalField(blank=True, decimal_places=3, max_digits=15, null=True)),
                ('unit_of_measure', models.CharField(default='EA', max_length=10)),
                ('unit_price', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('extended_price', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('requested_delivery_date', models.DateField(blank=True, null=True)),
                ('promised_delivery_date', models.DateField(blank=True, null=True)),
                ('requested_ship_date', models.DateField(blank=True, null=True)),
                ('line_item_data', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='line_items', to='edi_transactions.editransaction')),
            ],
            options={
                'db_table': 'edi_line_items',
            },
        ),
        migrations.CreateModel(
            name='DocumentWorkflow',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('workflow_name', models.CharField(max_length=100)),
                ('current_step', models.CharField(max_length=100)),
                ('workflow_status', models.CharField(choices=[('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('CANCELLED', 'Cancelled'), ('ON_HOLD', 'On Hold')], default='IN_PROGRESS', max_length=20)),
                ('requires_approval', models.BooleanField(default=False)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('approval_notes', models.TextField(blank=True, null=True)),
                ('is_automated', models.BooleanField(default=False)),
                ('automation_rules', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='edi_transactions.companyuser')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.company')),
                ('edi_transaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.editransaction')),
            ],
            options={
                'db_table': 'document_workflows',
            },
        ),
        migrations.CreateModel(
            name='DailyAnalytics',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('analytics_date', models.DateField()),
                ('total_transactions', models.IntegerField(default=0)),
                ('inbound_transactions', models.IntegerField(default=0)),
                ('outbound_transactions', models.IntegerField(default=0)),
                ('failed_transactions', models.IntegerField(default=0)),
                ('total_transaction_value', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('avg_transaction_value', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('avg_processing_time_minutes', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('system_uptime_percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('active_partners_count', models.IntegerField(default=0)),
                ('new_partners_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.company')),
            ],
            options={
                'db_table': 'daily_analytics',
            },
        ),
        migrations.CreateModel(
            name='CustomReport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('report_name', models.CharField(max_length=255)),
                ('report_description', models.TextField(blank=True, null=True)),
                ('report_type', models.CharField(choices=[('TRANSACTION_SUMMARY', 'Transaction Summary'), ('PARTNER_PERFORMANCE', 'Partner Performance'), ('FINANCIAL', 'Financial Report'), ('COMPLIANCE', 'Compliance Report'), ('CUSTOM', 'Custom Report')], max_length=50)),
                ('filters', models.JSONField(blank=True, null=True)),
                ('grouping', models.JSONField(blank=True, null=True)),
                ('metrics', models.JSONField(blank=True, null=True)),
                ('is_scheduled', models.BooleanField(default=False)),
                ('schedule_frequency', models.CharField(blank=True, choices=[('DAILY', 'Daily'), ('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly'), ('QUARTERLY', 'Quarterly'), ('YEARLY', 'Yearly')], max_length=20, null=True)),
                ('next_run_date', models.DateTimeField(blank=True, null=True)),
                ('output_format', models.CharField(choices=[('JSON', 'JSON'), ('CSV', 'CSV'), ('PDF', 'PDF'), ('EXCEL', 'Excel')], default='JSON', max_length=20)),
                ('recipients', models.JSONField(default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.company')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='edi_transactions.companyuser')),
            ],
            options={
                'db_table': 'custom_reports',
            },
        ),
        migrations.AddField(
            model_name='company',
            name='subscription_plan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='edi_transactions.subscriptionplan'),
        ),
        migrations.CreateModel(
            name='APIUsageLog',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('endpoint', models.CharField(max_length=255)),
                ('method', models.CharField(max_length=10)),
                ('status_code', models.IntegerField()),
                ('response_time_ms', models.IntegerField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('request_size_bytes', models.IntegerField(blank=True, null=True)),
                ('response_size_bytes', models.IntegerField(blank=True, null=True)),
                ('rate_limit_remaining', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edi_transactions.company')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='edi_transactions.companyuser')),
            ],
            options={
                'db_table': 'api_usage_log',
            },
        ),
        migrations.AddIndex(
            model_name='tradingpartner',
            index=models.Index(fields=['company'], name='idx_partner_comp'),
        ),
        migrations.AddIndex(
            model_name='tradingpartner',
            index=models.Index(fields=['partner_code'], name='idx_partner_code'),
        ),
        migrations.AddIndex(
            model_name='tradingpartner',
            index=models.Index(fields=['edi_id'], name='idx_partner_edi'),
        ),
        migrations.AddConstraint(
            model_name='tradingpartner',
            constraint=models.UniqueConstraint(fields=('company', 'partner_code'), name='unique_company_partner_code'),
        ),
        migrations.AddIndex(
            model_name='slamonitoring',
            index=models.Index(fields=['company'], name='idx_sla_company'),
        ),
        migrations.AddIndex(
            model_name='slamonitoring',
            index=models.Index(fields=['trading_partner'], name='idx_sla_partner'),
        ),
        migrations.AddIndex(
            model_name='slamonitoring',
            index=models.Index(fields=['measured_at'], name='idx_sla_measured'),
        ),
        migrations.AddIndex(
            model_name='scbnintegrationlog',
            index=models.Index(fields=['company'], name='idx_scbn_company'),
        ),
        migrations.AddIndex(
            model_name='scbnintegrationlog',
            index=models.Index(fields=['started_at'], name='idx_scbn_started'),
        ),
        migrations.AddIndex(
            model_name='purchaseorder',
            index=models.Index(fields=['company'], name='idx_po_company'),
        ),
        migrations.AddIndex(
            model_name='purchaseorder',
            index=models.Index(fields=['po_number'], name='idx_po_number'),
        ),
        migrations.AddIndex(
            model_name='purchaseorder',
            index=models.Index(fields=['po_date'], name='idx_po_date'),
        ),
        migrations.AddIndex(
            model_name='purchaseorder',
            index=models.Index(fields=['buyer_partner'], name='idx_po_buyer'),
        ),
        migrations.AddIndex(
            model_name='processinglog',
            index=models.Index(fields=['company'], name='idx_log_company'),
        ),
        migrations.AddIndex(
            model_name='processinglog',
            index=models.Index(fields=['interchange'], name='idx_log_interchange'),
        ),
        migrations.AddIndex(
            model_name='processinglog',
            index=models.Index(fields=['created_at'], name='idx_log_created'),
        ),
        migrations.AddIndex(
            model_name='processingerror',
            index=models.Index(fields=['company'], name='idx_err_company'),
        ),
        migrations.AddIndex(
            model_name='processingerror',
            index=models.Index(fields=['interchange'], name='idx_err_interchange'),
        ),
        migrations.AddIndex(
            model_name='processingerror',
            index=models.Index(fields=['severity'], name='idx_err_severity'),
        ),
        migrations.AddIndex(
            model_name='paymentdetail',
            index=models.Index(fields=['payment'], name='idx_paydet_payment'),
        ),
        migrations.AddIndex(
            model_name='paymentdetail',
            index=models.Index(fields=['invoice'], name='idx_paydet_invoice'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['company'], name='idx_pay_company'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['payment_number'], name='idx_pay_number'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['payment_date'], name='idx_pay_date'),
        ),
        migrations.AddIndex(
            model_name='monthlytransactionsummary',
            index=models.Index(fields=['company', 'year', 'month'], name='idx_monthly_comp_date'),
        ),
        migrations.AddConstraint(
            model_name='monthlytransactionsummary',
            constraint=models.UniqueConstraint(fields=('company', 'trading_partner', 'document_type', 'year', 'month'), name='unique_monthly_summary'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['company'], name='idx_inv_company'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['invoice_number'], name='idx_inv_number'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['invoice_date'], name='idx_inv_date'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['purchase_order'], name='idx_inv_po'),
        ),
        migrations.AddIndex(
            model_name='interchange',
            index=models.Index(fields=['company'], name='idx_int_company'),
        ),
        migrations.AddIndex(
            model_name='interchange',
            index=models.Index(fields=['control_number'], name='idx_int_ctrl_num'),
        ),
        migrations.AddIndex(
            model_name='interchange',
            index=models.Index(fields=['interchange_date'], name='idx_int_date'),
        ),
        migrations.AddIndex(
            model_name='interchange',
            index=models.Index(fields=['status'], name='idx_int_status'),
        ),
        migrations.AddIndex(
            model_name='functionalgroup',
            index=models.Index(fields=['interchange'], name='idx_fg_interchange'),
        ),
        migrations.AddIndex(
            model_name='editransaction',
            index=models.Index(fields=['company'], name='idx_trans_company'),
        ),
        migrations.AddIndex(
            model_name='editransaction',
            index=models.Index(fields=['trading_partner'], name='idx_trans_partner'),
        ),
        migrations.AddIndex(
            model_name='editransaction',
            index=models.Index(fields=['document_type'], name='idx_trans_doc_type'),
        ),
        migrations.AddIndex(
            model_name='editransaction',
            index=models.Index(fields=['status'], name='idx_trans_status'),
        ),
        migrations.AddIndex(
            model_name='editransaction',
            index=models.Index(fields=['direction'], name='idx_trans_direction'),
        ),
        migrations.AddIndex(
            model_name='editransaction',
            index=models.Index(fields=['received_at'], name='idx_trans_received'),
        ),
        migrations.AddIndex(
            model_name='editransaction',
            index=models.Index(fields=['po_number'], name='idx_trans_po_num'),
        ),
        migrations.AddIndex(
            model_name='editransaction',
            index=models.Index(fields=['invoice_number'], name='idx_trans_inv_num'),
        ),
        migrations.AddIndex(
            model_name='edilineitem',
            index=models.Index(fields=['transaction'], name='idx_line_trans'),
        ),
        migrations.AddIndex(
            model_name='documentworkflow',
            index=models.Index(fields=['company'], name='idx_wf_company'),
        ),
        migrations.AddIndex(
            model_name='documentworkflow',
            index=models.Index(fields=['edi_transaction'], name='idx_wf_transaction'),
        ),
        migrations.AddIndex(
            model_name='documentworkflow',
            index=models.Index(fields=['workflow_status'], name='idx_wf_status'),
        ),
        migrations.AddIndex(
            model_name='dailyanalytics',
            index=models.Index(fields=['company', 'analytics_date'], name='idx_daily_comp_date'),
        ),
        migrations.AddConstraint(
            model_name='dailyanalytics',
            constraint=models.UniqueConstraint(fields=('company', 'analytics_date'), name='unique_daily_analytics'),
        ),
        migrations.AddIndex(
            model_name='customreport',
            index=models.Index(fields=['company'], name='idx_report_company'),
        ),
        migrations.AddIndex(
            model_name='customreport',
            index=models.Index(fields=['created_by'], name='idx_report_creator'),
        ),
        migrations.AddIndex(
            model_name='customreport',
            index=models.Index(fields=['next_run_date'], name='idx_report_next_run'),
        ),
        migrations.AddIndex(
            model_name='companyuser',
            index=models.Index(fields=['company'], name='idx_user_company'),
        ),
        migrations.AddIndex(
            model_name='companyuser',
            index=models.Index(fields=['user'], name='idx_user_ref'),
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['subscription_plan'], name='idx_comp_sub_plan'),
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['scbn_mailbox_id'], name='idx_comp_scbn_id'),
        ),
        migrations.AddIndex(
            model_name='apiusagelog',
            index=models.Index(fields=['company'], name='idx_api_company'),
        ),
        migrations.AddIndex(
            model_name='apiusagelog',
            index=models.Index(fields=['created_at'], name='idx_api_created'),
        ),
        migrations.AddIndex(
            model_name='apiusagelog',
            index=models.Index(fields=['endpoint'], name='idx_api_endpoint'),
        ),
    ]
